{"version":3,"file":"static/js/787.8ef2d0d9.chunk.js","mappings":"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","sources":["webpack://react-lesson-1/./src/pages/Chat/ChatPage.module.css?0317","pages/Chat/ChatPage.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"photoSize\":\"ChatPage_photoSize__zsDD0\"};","import React, {useEffect, useRef, useState} from \"react\";\r\nimport chp from './ChatPage.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    sendMessage,\r\n    startMessagesListening,\r\n    stopMessagesListening\r\n} from \"../../redux/chat-reducer\";\r\nimport {\r\n    AppDispatch,\r\n    AppStateType\r\n} from \"../../redux/redux-store\";\r\nimport {ChatMessageAPIType} from \"../../api/chat-api\";\r\n\r\n\r\nconst ChatPage: React.FC= () => {\r\n    return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\nconst Chat: React.FC = () => {\r\n    const dispatch: AppDispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\nreturn () => {\r\n    dispatch(stopMessagesListening())\r\n}\r\n    }, [dispatch])\r\n\r\n\r\n     return <div>\r\n         {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\r\n             <>\r\n         <Messages />\r\n         <AddMessageForms />\r\n             </>\r\n\r\n     </div>\r\n\r\n}\r\nconst Messages: React.FC = () => {\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\nconst messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const [isAutoScroll, setIsAutoScroll] =\r\n        useState(false)\r\n        const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n            const element = e.currentTarget;\r\n            let differenceWhatWeSee = element.scrollHeight - element.scrollTop;\r\n            let value = Math.abs(differenceWhatWeSee - element.clientHeight);\r\n            if (value < 300) {\r\n                if (!isAutoScroll) {\r\n                    setIsAutoScroll(true)\r\n                }\r\n            } else {\r\n                if (isAutoScroll) {\r\n                    setIsAutoScroll(false)\r\n                }\r\n            }\r\n        }\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            setTimeout (() => {\r\n                messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\", })\r\n            }, 200)\r\n        }\r\n    }, [messages])\r\n        return <div style={{height: '400px', overflowY: \"auto\"}} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m} />)}\r\n    <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n\r\n}\r\nconst Message: React.FC<{message: ChatMessageAPIType}> = React.memo\r\n(({message}) => {\r\n     return <div className={chp.photoSize}>\r\n         <img src={message.photo} alt={'icon'}/>\r\n         <b>{message.userName}</b>\r\n         <br/>\r\n         {message.message}\r\n         <hr/>\r\n     </div>\r\n\r\n})\r\n\r\nconst AddMessageForms: React.FC<{}> = ({}) => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch: AppDispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) =>\r\n                setMessage(e.currentTarget.value)} ></textarea>\r\n        </div>\r\n        <div>\r\n            <button disabled={status !== 'ready'}\r\n                    onClick={sendMessageHandler}>Send</button>\r\n        </div>\r\n    </div>\r\n\r\n}\r\nexport default ChatPage;\r\n// export type AppDispatch = ThunkDispatch<AppStateType, any, AppAction>\r\n// type AppAction = ReturnType<typeof store.dispatch>\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","_jsxs","children","_jsx","_Fragment","Messages","AddMessageForms","messagesAnchorRef","useRef","messages","_useState","useState","_useState2","_slicedToArray","isAutoScroll","setIsAutoScroll","setTimeout","_messagesAnchorRef$cu","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","differenceWhatWeSee","scrollHeight","scrollTop","Math","abs","clientHeight","map","m","index","Message","message","id","ref","React","_ref","className","chp","src","photo","alt","userName","_ref2","obj","TypeError","_objectDestructuringEmpty","_useState3","_useState4","setMessage","onChange","value","disabled","onClick","sendMessage"],"sourceRoot":""}